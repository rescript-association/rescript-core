// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Test from "./Test.mjs";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Core__Result from "../src/Core__Result.mjs";

var eq = Caml_obj.equal;

var fromArrayTestCases = [
  [
    "when empty, return empty",
    [],
    {
      TAG: /* Ok */0,
      _0: []
    }
  ],
  [
    "when one error, return it",
    [{
        TAG: /* Error */1,
        _0: "a"
      }],
    {
      TAG: /* Error */1,
      _0: "a"
    }
  ],
  [
    "when one ok, return it",
    [{
        TAG: /* Ok */0,
        _0: 1
      }],
    {
      TAG: /* Ok */0,
      _0: [1]
    }
  ],
  [
    "when all ok, return all",
    [
      {
        TAG: /* Ok */0,
        _0: 1
      },
      {
        TAG: /* Ok */0,
        _0: 2
      },
      {
        TAG: /* Ok */0,
        _0: 3
      }
    ],
    {
      TAG: /* Ok */0,
      _0: [
        1,
        2,
        3
      ]
    }
  ],
  [
    "when all error, return first",
    [
      {
        TAG: /* Error */1,
        _0: "a"
      },
      {
        TAG: /* Error */1,
        _0: "b"
      },
      {
        TAG: /* Error */1,
        _0: "c"
      }
    ],
    {
      TAG: /* Error */1,
      _0: "a"
    }
  ],
  [
    "when mix, return first error",
    [
      {
        TAG: /* Ok */0,
        _0: 1
      },
      {
        TAG: /* Error */1,
        _0: "a"
      },
      {
        TAG: /* Ok */0,
        _0: 2
      },
      {
        TAG: /* Error */1,
        _0: "b"
      }
    ],
    {
      TAG: /* Error */1,
      _0: "a"
    }
  ]
];

fromArrayTestCases.forEach(function (param) {
      Test.run([
            [
              "ResultTests.res",
              14,
              22,
              43
            ],
            "fromArray: " + param[0] + ""
          ], Core__Result.fromArray(param[1]), eq, param[2]);
    });

var fromArrayWithTestCases = [
  [
    "when empty, return empty",
    [],
    {
      TAG: /* Ok */0,
      _0: []
    }
  ],
  [
    "when one error, return it",
    [30],
    {
      TAG: /* Error */1,
      _0: "30"
    }
  ],
  [
    "when one ok, return it",
    [2],
    {
      TAG: /* Ok */0,
      _0: [4]
    }
  ],
  [
    "when all ok, return all",
    [
      1,
      2,
      3
    ],
    {
      TAG: /* Ok */0,
      _0: [
        2,
        4,
        6
      ]
    }
  ],
  [
    "when all error, return first",
    [
      20,
      30,
      40
    ],
    {
      TAG: /* Error */1,
      _0: "20"
    }
  ],
  [
    "when mix, return first error",
    [
      1,
      2,
      14,
      3,
      4
    ],
    {
      TAG: /* Error */1,
      _0: "14"
    }
  ]
];

function fromArrayWithMapper(n) {
  if (n < 10) {
    return {
            TAG: /* Ok */0,
            _0: (n << 1)
          };
  } else {
    return {
            TAG: /* Error */1,
            _0: n.toString()
          };
  }
}

fromArrayWithTestCases.forEach(function (param) {
      Test.run([
            [
              "ResultTests.res",
              28,
              15,
              40
            ],
            "fromArrayWith: " + param[0] + ""
          ], Core__Result.fromArrayWith(param[1], fromArrayWithMapper), eq, param[2]);
    });

Test.run([
      [
        "ResultTests.res",
        35,
        20,
        48
      ],
      "mapError: if ok, return it"
    ], Core__Result.mapError({
          TAG: /* Ok */0,
          _0: 5
        }, (function (i) {
            return Math.imul(i, 3);
          })), eq, {
      TAG: /* Ok */0,
      _0: 5
    });

Test.run([
      [
        "ResultTests.res",
        38,
        13,
        42
      ],
      "mapError: if error, apply f"
    ], Core__Result.mapError({
          TAG: /* Error */1,
          _0: 5
        }, (function (i) {
            return Math.imul(i, 3);
          })), eq, {
      TAG: /* Error */1,
      _0: 15
    });

export {
  eq ,
  fromArrayTestCases ,
  fromArrayWithTestCases ,
  fromArrayWithMapper ,
}
/*  Not a pure module */
