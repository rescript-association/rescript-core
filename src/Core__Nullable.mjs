// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "./Core__Option.mjs";

function fromOption(option) {
  if (option !== undefined) {
    return Caml_option.valFromOption(option);
  }
  
}

function equal(a, b, eq) {
  return Core__Option.equal((a == null) ? undefined : Caml_option.some(a), (b == null) ? undefined : Caml_option.some(b), eq);
}

function compare(a, b, cmp) {
  return Core__Option.compare((a == null) ? undefined : Caml_option.some(a), (b == null) ? undefined : Caml_option.some(b), cmp);
}

function getWithDefault(value, $$default) {
  if (value == null) {
    return $$default;
  } else {
    return value;
  }
}

function getExn(value) {
  if (!(value == null)) {
    return value;
  }
  throw {
        RE_EXN_ID: "Invalid_argument",
        _1: "Nullable.getExn: value is null or undefined",
        Error: new Error()
      };
}

function map(value, f) {
  if (value == null) {
    return value;
  } else {
    return Curry._1(f, value);
  }
}

function mapWithDefault(value, $$default, f) {
  if (value == null) {
    return $$default;
  } else {
    return Curry._1(f, value);
  }
}

function flatMap(value, f) {
  if (value == null) {
    return value;
  } else {
    return Curry._1(f, value);
  }
}

export {
  equal ,
  compare ,
  fromOption ,
  getWithDefault ,
  getExn ,
  map ,
  mapWithDefault ,
  flatMap ,
}
/* No side effect */
