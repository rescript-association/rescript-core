// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function filter(opt, p) {
  var p$1 = Curry.__1(p);
  if (opt !== undefined && p$1(Caml_option.valFromOption(opt))) {
    return opt;
  }
  
}

function forEach(opt, f) {
  var f$1 = Curry.__1(f);
  if (opt !== undefined) {
    return f$1(Caml_option.valFromOption(opt));
  }
  
}

function getExn(x) {
  if (x !== undefined) {
    return Caml_option.valFromOption(x);
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function mapWithDefault(opt, $$default, f) {
  var f$1 = Curry.__1(f);
  if (opt !== undefined) {
    return f$1(Caml_option.valFromOption(opt));
  } else {
    return $$default;
  }
}

function map(opt, f) {
  var f$1 = Curry.__1(f);
  if (opt !== undefined) {
    return Caml_option.some(f$1(Caml_option.valFromOption(opt)));
  }
  
}

function flatMap(opt, f) {
  var f$1 = Curry.__1(f);
  if (opt !== undefined) {
    return f$1(Caml_option.valFromOption(opt));
  }
  
}

function getWithDefault(opt, $$default) {
  if (opt !== undefined) {
    return Caml_option.valFromOption(opt);
  } else {
    return $$default;
  }
}

function orElse(opt, other) {
  if (opt !== undefined) {
    return opt;
  } else {
    return other;
  }
}

function isSome(x) {
  return x !== undefined;
}

function isNone(x) {
  return x === undefined;
}

function equal(a, b, eq) {
  if (a !== undefined) {
    if (b !== undefined) {
      return Curry._2(eq, Caml_option.valFromOption(a), Caml_option.valFromOption(b));
    } else {
      return false;
    }
  } else {
    return b === undefined;
  }
}

function compare(a, b, cmp) {
  if (a !== undefined) {
    if (b !== undefined) {
      return Curry._2(cmp, Caml_option.valFromOption(a), Caml_option.valFromOption(b));
    } else {
      return 1;
    }
  } else if (b !== undefined) {
    return -1;
  } else {
    return 0;
  }
}

export {
  filter ,
  forEach ,
  getExn ,
  mapWithDefault ,
  map ,
  flatMap ,
  getWithDefault ,
  orElse ,
  isSome ,
  isNone ,
  equal ,
  compare ,
}
/* No side effect */
